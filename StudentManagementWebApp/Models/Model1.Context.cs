//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagementWebApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StudentManagementDbEntities : DbContext
    {
        public StudentManagementDbEntities()
            : base("name=StudentManagementDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Student> Students { get; set; }
    
        public virtual int spDeleteStudent(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteStudent", studentIdParameter);
        }
    
        public virtual int spInsertStudentInfo(string studentName, Nullable<long> studentMobileNo, string studentEmailId, string studentCource, Nullable<double> studentFees)
        {
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentMobileNoParameter = studentMobileNo.HasValue ?
                new ObjectParameter("StudentMobileNo", studentMobileNo) :
                new ObjectParameter("StudentMobileNo", typeof(long));
    
            var studentEmailIdParameter = studentEmailId != null ?
                new ObjectParameter("StudentEmailId", studentEmailId) :
                new ObjectParameter("StudentEmailId", typeof(string));
    
            var studentCourceParameter = studentCource != null ?
                new ObjectParameter("StudentCource", studentCource) :
                new ObjectParameter("StudentCource", typeof(string));
    
            var studentFeesParameter = studentFees.HasValue ?
                new ObjectParameter("StudentFees", studentFees) :
                new ObjectParameter("StudentFees", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertStudentInfo", studentNameParameter, studentMobileNoParameter, studentEmailIdParameter, studentCourceParameter, studentFeesParameter);
        }
    
        public virtual int spUpdatStudentInfo(Nullable<int> studentId, string studentName, Nullable<long> studentMobileNo, string studentEmailId, string studentCource, Nullable<double> studentFees)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentMobileNoParameter = studentMobileNo.HasValue ?
                new ObjectParameter("StudentMobileNo", studentMobileNo) :
                new ObjectParameter("StudentMobileNo", typeof(long));
    
            var studentEmailIdParameter = studentEmailId != null ?
                new ObjectParameter("StudentEmailId", studentEmailId) :
                new ObjectParameter("StudentEmailId", typeof(string));
    
            var studentCourceParameter = studentCource != null ?
                new ObjectParameter("StudentCource", studentCource) :
                new ObjectParameter("StudentCource", typeof(string));
    
            var studentFeesParameter = studentFees.HasValue ?
                new ObjectParameter("StudentFees", studentFees) :
                new ObjectParameter("StudentFees", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatStudentInfo", studentIdParameter, studentNameParameter, studentMobileNoParameter, studentEmailIdParameter, studentCourceParameter, studentFeesParameter);
        }
    
        public virtual ObjectResult<Student> InsetRecord(string studentName, Nullable<long> studentMobileNo, string studentEmailId, string studentCource, Nullable<double> studentFees)
        {
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentMobileNoParameter = studentMobileNo.HasValue ?
                new ObjectParameter("StudentMobileNo", studentMobileNo) :
                new ObjectParameter("StudentMobileNo", typeof(long));
    
            var studentEmailIdParameter = studentEmailId != null ?
                new ObjectParameter("StudentEmailId", studentEmailId) :
                new ObjectParameter("StudentEmailId", typeof(string));
    
            var studentCourceParameter = studentCource != null ?
                new ObjectParameter("StudentCource", studentCource) :
                new ObjectParameter("StudentCource", typeof(string));
    
            var studentFeesParameter = studentFees.HasValue ?
                new ObjectParameter("StudentFees", studentFees) :
                new ObjectParameter("StudentFees", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("InsetRecord", studentNameParameter, studentMobileNoParameter, studentEmailIdParameter, studentCourceParameter, studentFeesParameter);
        }
    
        public virtual ObjectResult<Student> InsetRecord(string studentName, Nullable<long> studentMobileNo, string studentEmailId, string studentCource, Nullable<double> studentFees, MergeOption mergeOption)
        {
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentMobileNoParameter = studentMobileNo.HasValue ?
                new ObjectParameter("StudentMobileNo", studentMobileNo) :
                new ObjectParameter("StudentMobileNo", typeof(long));
    
            var studentEmailIdParameter = studentEmailId != null ?
                new ObjectParameter("StudentEmailId", studentEmailId) :
                new ObjectParameter("StudentEmailId", typeof(string));
    
            var studentCourceParameter = studentCource != null ?
                new ObjectParameter("StudentCource", studentCource) :
                new ObjectParameter("StudentCource", typeof(string));
    
            var studentFeesParameter = studentFees.HasValue ?
                new ObjectParameter("StudentFees", studentFees) :
                new ObjectParameter("StudentFees", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("InsetRecord", mergeOption, studentNameParameter, studentMobileNoParameter, studentEmailIdParameter, studentCourceParameter, studentFeesParameter);
        }
    }
}
